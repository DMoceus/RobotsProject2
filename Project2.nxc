#define X_SIZE 7
#define Y_SIZE 7
#define INF 255
#define MAX_SIZE X_SIZE*Y_SIZE
#define CLEARLINE(L) \
  TextOut(0,L,"        ");

// GLOBAL VARIABLES - don't touch
int map[X_SIZE][Y_SIZE]; // map
bool done = false;
int currentX = 0;
int currentY = 0;
int wobble = 0;

// TODO: GLOBAL VARIABLES - update these before running program
string direction = "N"; // starting direction
int startX = 2; // starting x coordinate
int startY = 0; // starting y coordinate
int endX = 5; // ending x coordinate
int endY = 4; // ending y coordinate

//*********** A* STUFF ***********//
struct Node{int x;int y;};
Node globalPath[X_SIZE * Y_SIZE];

// function declarations
void nodePush(Node data, Node& nodeArray[]);
int hScore(int xStart, int yStart, int xEnd, int yEnd);
void makePath(const Node& cameFrom[][], Node& current);
Node nodePop(Node& nodeArray[]);
Node nodePopNum(Node& nodeArray[], int index);
int isInSet(Node& testNode, Node& testSet[]);
int lowestFScore(Node& setToCheck[], int& fScoreTable[][]);
void reversePath();
int aStar(Node& startNode, Node& endNode);
void ERROR(string message);

// actual A* algorithm
int aStar(Node& startNode, Node& endNode){
	Node finishedSet[MAX_SIZE];
	Node workingSet[MAX_SIZE];
	int i,j;
	for(i=0;i<MAX_SIZE;i++){
		workingSet[i].x = 255;
		workingSet[i].y = 255;
		finishedSet[i].x = 255;
		finishedSet[i].y = 255;
		/*Node maxNode;
		maxNode.x = INF;
		maxNode.y = INF;
		workingSet[i] = maxNode;
		Node maxNode2;
		maxNode2.x = INF;
		maxNode2.y = INF;
		finishedSet[i] = maxNode;*/
	}
	nodePush(startNode, workingSet);
	Node cameFrom[X_SIZE][Y_SIZE];
	for(i=0;i<X_SIZE;i++){
		for(j=0;j<Y_SIZE;j++){
			Node maxNode;
			maxNode.x = INF;
			maxNode.y = INF;
			cameFrom[i][j] = maxNode;
		}
	}
	int gScore[X_SIZE][Y_SIZE];
	gScore[startNode.x][startNode.y] = 0;
	int fScore[X_SIZE][Y_SIZE];
	for(i=0;i<X_SIZE;i++){
		for(j=0;j<Y_SIZE;j++){
			gScore[i][j] = 0;
			fScore[i][j] = INF;
		}
	}

	fScore[startNode.x][startNode.y] = gScore[startNode.x][startNode.y] + hScore(startNode.x,startNode.y,endNode.x,endNode.y);
	Node current;
	int lowestIndex = 0;

	while(workingSet[0].x != INF){
		lowestIndex = lowestFScore(workingSet,fScore);
		//ERROR("reachable");
		current = workingSet[lowestIndex];
		//printf("current: {x=%d,y=%d}\n",current.x,current.y);
		if(current.x == endNode.x && current.y == endNode.y){
			makePath(cameFrom,current);		
			reversePath();
			return 1;
		}
		nodePopNum(workingSet,lowestIndex);
		//ERROR("reachable");
		nodePush(current,finishedSet);
		int i=0;
		Node neighbor;
		for(i=0;i<4;i++){
			switch(i){
				case 0:
					neighbor.x = current.x+1;
					neighbor.y = current.y;
					if(neighbor.x >= X_SIZE){
						neighbor.x = current.x;
					}
					break;
				case 1:
					neighbor.x = current.x-1;
					neighbor.y = current.y;
					if(neighbor.x < 0){
						neighbor.x = current.x;
					}
					break;
				case 2:
					neighbor.x = current.x;
					neighbor.y = current.y+1;
					if(neighbor.y >= Y_SIZE){
						neighbor.y = current.y;
					}
					break;
				case 3:
					neighbor.x = current.x;
					neighbor.y = current.y-1;
					if(neighbor.y < 0){
						neighbor.y = current.y;
					}
					break;
			}
			if(isInSet(neighbor,finishedSet) == 1){}
			else if(map[neighbor.x][neighbor.y] == 1){}
			else{
				int tempGScore = gScore[current.x][current.y] + 1;
				if(0==isInSet(neighbor,workingSet) || tempGScore < gScore[neighbor.x][neighbor.y]){
					cameFrom[neighbor.x][neighbor.y] = current;
					gScore[neighbor.x][neighbor.y] = tempGScore;
					fScore[neighbor.x][neighbor.y] = tempGScore + hScore(neighbor.x,neighbor.y,endNode.x,endNode.y);
					if(0==isInSet(neighbor,workingSet)){
						nodePush(neighbor,workingSet);
					}
				}
			}
			
		}
	}
	return -1;
}

void reversePath(){
	int i=0;
	int j=0;
	for(j=0;globalPath[j].x != INF;j++){}
	j--;
	Node temp;
	while(i<=j){
		temp.x = globalPath[j].x;
		temp.y = globalPath[j].y;
		globalPath[j].x = globalPath[i].x;
		globalPath[j].y = globalPath[i].y;
		globalPath[i].x = temp.x;
		globalPath[i].y = temp.y;
		j--;
		i++;
	}
}

int lowestFScore(Node& setToCheck[], int& fScoreTable[][]){
	int i=0;
	int minIndex = 0;
	int minVal = setToCheck[0].x;
	//int minVal = 255;
	while(setToCheck[i].x != INF){
		//ERROR(NumToStr(setToCheck[i].x));
		if(fScoreTable[setToCheck[i].x][setToCheck[i].y] < minVal){
			minVal = fScoreTable[setToCheck[i].x][setToCheck[i].y];
			minIndex = i;
		}
		i++;
	}
	return minIndex;
}

int isInSet(Node& testNode, Node& testSet[]){
	int z = 0;
	while(testSet[z].x != INF){
		if(testNode.x == testSet[z].x && testNode.y == testSet[z].y){
			return 1;
		}
		z++;
	}
	return 0;
}

Node nodePopNum(Node& nodeArray[], int index){
	Node temp;
	temp.x = nodeArray[index].x;
	temp.y = nodeArray[index].y;
	int i=index;
	while(nodeArray[i+1].x != INF){
		nodeArray[i].x = nodeArray[i+1].x;
		nodeArray[i].y = nodeArray[i+1].y;
		i++;
	}
	nodeArray[i].x = INF;
	nodeArray[i].y = INF;
	return temp;
}

Node nodePop(Node& nodeArray[]){
	int i=0;
	while(nodeArray[i].x != INF){i++;}
	Node temp;
	temp.x = nodeArray[i-1].x;
	temp.y = nodeArray[i-1].y;
	nodeArray[i-1].x = INF;
	nodeArray[i-1].x = INF;
	return temp;
}

void nodePush( Node data, Node& nodeArray[] ){
	int i=0;
	while(i<(X_SIZE*Y_SIZE) && nodeArray[i].x != INF){i++;}
	nodeArray[i] = data;
}

int hScore(int xStart, int yStart, int xEnd, int yEnd){
	int temp1 = xEnd - xStart;
	if(temp1 < 0){
		temp1 = -temp1;
	}
	int temp2 = yEnd - yStart;
	if(temp2 < 0){
		temp2 = -temp2;
	}
	return temp1 + temp2;
}

void makePath(const Node& cameFrom[][], Node& current){
	Node temp;
	temp.x = current.x;
	temp.y = current.y;
	int i=0;
	for(i=0;i<MAX_SIZE;i++){
		globalPath[i].x = INF;
		globalPath[i].y = INF;
	}
	i = 0;
	globalPath[i] = temp;
	i++;
	while(cameFrom[temp.x][temp.y].x != INF){
		int xTemp = temp.x;
		int yTemp = temp.y;
		temp.x = cameFrom[xTemp][yTemp].x;
		temp.y = cameFrom[xTemp][yTemp].y;
		globalPath[i] = temp;
		i++;
	}
}



// initialize the map
void initializeMap() {
	int i, j;
	for(i = 0; i < X_SIZE; i++) {
		for(j = 0; j < Y_SIZE; j++) {
			map[i][j] = 0;
		}
	}
	map[startX][startY] = 3; // add starting point to map
	map[endX][endY] = 4; // add ending point to map
	currentX = startX;
	currentY = startY;
}

// flag obstacle on map
void flag(int xcoord, int ycoord) {
	map[xcoord][ycoord] = 1;
}

// update map on LCD
void updateLCD() {
	// clear entire LCD
	ClearScreen();

	TextOut(0,LCD_LINE1, direction); // direction
	// coordinates
	TextOut(75,LCD_LINE1, "(");
	TextOut(80,LCD_LINE1, NumToStr(currentX));
	TextOut(85,LCD_LINE1, ",");
	TextOut(89,LCD_LINE1, NumToStr(currentY));
	TextOut(94,LCD_LINE1, ")");
	TextOut(15,LCD_LINE2,"MAP");
	TextOut(65,LCD_LINE2,"KEY");
	TextOut(50,LCD_LINE3,". new");
	TextOut(50,LCD_LINE4,"* path");
	TextOut(50,LCD_LINE5,"o obstcl");
	TextOut(50,LCD_LINE6,"s start");
	TextOut(50,LCD_LINE7,"e end");
	int i, j;
	for(i = 0; i < X_SIZE; i++) {
		for(j = 0; j < Y_SIZE; j++) {
			if(map[i][j] == 0) { // if unexplored
				TextOut(i*6,j*6,".");
			} else if(map[i][j] == 1) { // else if obstacle
				TextOut(i*6,j*6,"o");
			} else if(map[i][j] == 2) { // else if path
				TextOut(i*6,j*6,"*");
			} else if(map[i][j] == 3) { // else if start
				TextOut(i*6,j*6,"s");
			} else if(map[i][j] == 4) { // else if end
				TextOut(i*6,j*6,"e");
			}
		}
	}
}

// 90 degree right turn
void right() {
	OnFwd(OUT_A,-125);
	OnFwd(OUT_C,90);
	Wait(380);
	Off(OUT_AC);
	Wait(500);
	switch(direction) {
		case "N":
			direction = "E";
			break;
		case "E":
			direction = "S";
			break;
		case "S":
			direction = "W";
			break;
		case "W":
			direction = "N";
			break;
	}
}

// 90 degee left turn
void left() {
	OnFwd(OUT_A,90);
	OnFwd(OUT_C,-125);
	Wait(380);
	Off(OUT_AC);
	Wait(500);
	switch(direction) {
		case "N":
			direction = "W";
			break;
		case "E":
			direction = "N";
			break;
		case "S":
			direction = "E";
			break;
		case "W":
			direction = "S";
			break;
	}
}

// move forward and check for obstacles
int forward() {
	int distance = 0;
	bool obstFound = false;
	while(distance < 2700 && !obstFound) {
		if(wobble == 1) {
			OnRev(OUT_A, 53);
			OnRev(OUT_C, 50);
			wobble = 0;
		} else {
			OnRev(OUT_A, 51);
			OnRev(OUT_C, 50);
			wobble = 1;
		}
		//OnRevSync(OUT_AC, 50, 0);
		// if black line is hit (obstacle is found)
		if (SensorValue(IN_3) < 50) {
			// mark obstacle found
			obstFound = true;
			// indicate new obstacle on map
			switch(direction) {
				case "N":
					flag(currentX, currentY+1);
					break;
				case "E":
					flag(currentX+1, currentY);
					break;
				case "S":
					flag(currentX, currentY-1);
					break;
				case "W":
					flag(currentX-1, currentY);
					break;
			}
			// reverse slightly
			OnFwd(OUT_A, 51.8);
			OnFwd(OUT_C, 50);
			Wait(400);
			Off(OUT_AC);
			// return
			return -1;
		}
		distance++;
	}
	Off(OUT_AC);
	// time between tiles
	Wait(500);
	// if no obstacle found, update location info & map
	if(!obstFound) {
		// add to current path
		map[currentX][currentY] = 2;
		// update current coordinates accordingly
		switch(direction) {
			case "N":
				currentY = currentY+1;
				break;
			case "E":
				currentX = currentX+1;
				break;
			case "S":
				currentY = currentY-1;
				break;
			case "W":
				currentX = currentX-1;
				break;
		}
	}
	// update LCD
	updateLCD();
}

// show error message on screen if something's gone wrong
void ERROR(string message) {
	ClearScreen();
	TextOut(30,LCD_LINE5,message);
	// show message for 5 seconds
	Wait(5000);
}

// traverse the globalPath discovered by A*
int traverse() {
	// if there's no path, just return
	//if(globalPath[0] == NULL) return;
	int i = 1;
	// for each node in the path, not counting start node
	while(globalPath[i].x != INF) {
		// depending on current direction
		switch(direction) {
			case "N":
				if(currentX < globalPath[i].x) {
					right();
					if(forward() == -1) return -1;
				}
				else if(currentX > globalPath[i].x) {
					left();
					if(forward() == -1) return -1;
				}
				else if(currentY < globalPath[i].y) {
					if(forward() == -1) return -1;
				}
				else if(currentY > globalPath[i].y) {
					left();
					left();
					if(forward() == -1) return -1;
				}
			case "S":
				if(currentX < globalPath[i].x) {
					left();
					if(forward() == -1) return -1;
				}
				else if(currentX > globalPath[i].x) {
					right();
					if(forward() == -1) return -1;
				}
				else if(currentY < globalPath[i].y) {
					left();
					left();
					if(forward() == -1) return -1;
				}
				else if(currentY > globalPath[i].y) {
					if(forward() == -1) return -1;
				}
			case "E":
				if(currentX < globalPath[i].x) {
					if(forward() == -1) return -1;
				}
				else if(currentX > globalPath[i].x) {
					right();
					right();
					if(forward() == -1) return -1;
				}
				else if(currentY < globalPath[i].y) {
					left();
					if(forward() == -1) return -1;
				}
				else if(currentY > globalPath[i].y) {
					right();
					if(forward() == -1) return -1;
				}
			case "W":
				if(currentX < globalPath[i].x) {
					right();
					right();
					if(forward() == -1) return -1;
				}
				else if(currentX > globalPath[i].x) {
					if(forward() == -1) return -1;
				}
				else if(currentY < globalPath[i].y) {
					right();
					if(forward() == -1) return -1;
				}
				else if(currentY > globalPath[i].y) {
					left();
					if(forward() == -1) return -1;
				}
		}
		i++;
	}
}

task currentPos() {
	while(1) {
		TextOut(currentX*6,currentY*6," ");
		Wait(500);
		TextOut(currentX*6,currentY*6,"*");
		Wait(500);
	}
}

task main() {

	// turn light sensor on
	SetSensorLight(IN_3);

	// initialize the map, flag known obstacles, & update LCD
	initializeMap();
	flag(4,5);
	flag(4,4);
	flag(4,3);
	flag(4,2);
	flag(4,0);
	flag(2,2);
	flag(5,2);
	flag(6,2);
	updateLCD();

	// create start and end nodes
	Node startNode;
	Node endNode;
	startNode.x = startX;
	startNode.y = startY;
	endNode.x = endX;
	endNode.y = endY;

	// calculate a* shortest path, stored in globalPath
	// as an array of nodes
	aStar(startNode, endNode);

	// start current location blinking task
	start currentPos;

	// testing A* - WOO IT WORKS!!
	/*int i = 0;
	while(globalPath[i].x != INF) {
		ClearScreen();
		TextOut(0, LCD_LINE1, NumToStr(i));
		TextOut(5, LCD_LINE1, "(");
		TextOut(10, LCD_LINE1, NumToStr(globalPath[i].x));
		TextOut(15, LCD_LINE1, ",");
		TextOut(20, LCD_LINE1, NumToStr(globalPath[i].y));
		TextOut(25, LCD_LINE1, ")");
		i++;
		Wait(1000);
	}*/

	// while current location is not the end path
	while(currentX != endX && currentY != endY) {
		// if obstacle found
		if(traverse() == -1) {
			// create current location node
			Node currentNode;
			currentNode.x = currentX;
			currentNode.y = currentY;
			// calculate new a* route from current location
			aStar(currentNode, endNode);
		}
	}

	// stop all other tasks once done but keep map on screen
	//StopAllTasks();
	while(1);
}
