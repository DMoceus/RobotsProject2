#define X_SIZE 10
#define Y_SIZE 10
#define MAX_SIZE X_SIZE*Y_SIZE
#define INF 9999999

//Variable Declarations
struct Node{int x;int y;};
Node globalPath[X_SIZE * Y_SIZE];
int obstacleMap[X_SIZE][Y_SIZE] = {0};

/*
 * Add Obstacles like so:
 * obstacleMap[2][3] = 1;
 */

//Function Declarations
void nodePush(Node data, Node& nodeArray[]);
int hScore(int xStart, int yStart, int xEnd, int yEnd);
void makePath(const Node& cameFrom[][], Node& current);
Node nodePop(Node& nodeArray[]);
Node nodePopNum(Node& nodeArray[], int index);
int isInSet(Node& testNode, Node& testSet[]);
int lowestFScore(Node& setToCheck[], int& fScoreTable[][]);
void reversePath();
int aStar(Node& startNode, Node& endNode);

int aStar(Node& startNode, Node& endNode){
	Node finishedSet[MAX_SIZE];
	Node workingSet[MAX_SIZE];
	int i,j;
	for(i=0;i<MAX_SIZE;i++){
		Node maxNode;
		maxNode.x = INF;
		maxNode.y = INF;
		workingSet[i] = maxNode;
		Node maxNode2;
		maxNode2.x = INF;
		maxNode2.y = INF;
		finishedSet[i] = maxNode2;
	}
	nodePush(startNode,workingSet);
	Node cameFrom[X_SIZE][Y_SIZE];
	for(i=0;i<X_SIZE;i++){
		for(j=0;j<Y_SIZE;j++){
			Node maxNode;
			maxNode.x = INF;
			maxNode.y = INF;
			cameFrom[i][j] = maxNode;
		}
	}
	int gScore[X_SIZE][Y_SIZE];
	gScore[startNode.x][startNode.y] = 0;
	int fScore[X_SIZE][Y_SIZE];
	for(i=0;i<X_SIZE;i++){
		for(j=0;j<Y_SIZE;j++){
			gScore[i][j] = 0;
			fScore[i][j] = INF;
		}
	}

	fScore[startNode.x][startNode.y] = gScore[startNode.x][startNode.y] + hScore(startNode.x,startNode.y,endNode.x,endNode.y);
	Node current;
	int lowestIndex;

	while(workingSet[0].x != INF){
		lowestIndex = lowestFScore(workingSet,fScore);
		current = workingSet[lowestIndex];
		//printf("current: {x=%d,y=%d}\n",current.x,current.y);
		if(current.x == endNode.x && current.y == endNode.y){
			makePath(cameFrom,current);		
			reversePath();
			return 1;
		}
		nodePopNum(workingSet,lowestIndex);
		nodePush(current,finishedSet);
		int i=0;
		Node neighbor;
		for(i=0;i<4;i++){
			switch(i){
				case 0:
					neighbor.x = current.x+1;
					neighbor.y = current.y;
					if(neighbor.x >= X_SIZE){
						neighbor.x = current.x;
					}
					break;
				case 1:
					neighbor.x = current.x-1;
					neighbor.y = current.y;
					if(neighbor.x < 0){
						neighbor.x = current.x;
					}
					break;
				case 2:
					neighbor.x = current.x;
					neighbor.y = current.y+1;
					if(neighbor.y >= Y_SIZE){
						neighbor.y = current.y;
					}
					break;
				case 3:
					neighbor.x = current.x;
					neighbor.y = current.y-1;
					if(neighbor.y < 0){
						neighbor.y = current.y;
					}
					break;
			}
			if(isInSet(neighbor,finishedSet) == 1){}
			else if(obstacleMap[neighbor.x][neighbor.y] == 1){}
			else{
				int tempGScore = gScore[current.x][current.y] + 1;
				if(0==isInSet(neighbor,workingSet) || tempGScore < gScore[neighbor.x][neighbor.y]){
					cameFrom[neighbor.x][neighbor.y] = current;
					gScore[neighbor.x][neighbor.y] = tempGScore;
					fScore[neighbor.x][neighbor.y] = tempGScore + hScore(neighbor.x,neighbor.y,endNode.x,endNode.y);
					if(0==isInSet(neighbor,workingSet)){
						nodePush(neighbor,workingSet);
					}
				}
			}
			
		}
	}
	return -1;
}

void reversePath(){
	int i=0;
	int j=0;
	for(j=0;globalPath[j].x != INF;j++){}
	j--;
	Node temp;
	while(i<=j){
		temp.x = globalPath[j].x;
		temp.y = globalPath[j].y;
		globalPath[j].x = globalPath[i].x;
		globalPath[j].y = globalPath[i].y;
		globalPath[i].x = temp.x;
		globalPath[i].y = temp.y;
		j--;
		i++;
	}
}

int lowestFScore(Node& setToCheck[], int& fScoreTable[][]){
	int i=0;
	int minIndex = 0;
	int minVal = setToCheck[0].x;
	while(setToCheck[i].x != INF){
		if(fScoreTable[setToCheck[i].x][setToCheck[i].y] < minVal){
			minVal = fScoreTable[setToCheck[i].x][setToCheck[i].y];
			minIndex = i;
		}
		i++;
	}
	return minIndex;
}

int isInSet(Node& testNode, Node& testSet[]){
	int z = 0;
	while(testSet[z].x != INF){
		if(testNode.x == testSet[z].x && testNode.y == testSet[z].y){
			return 1;
		}
		z++;
	}
	return 0;
}

Node nodePopNum(Node& nodeArray[], int index){
	Node temp;
	temp.x = nodeArray[index].x;
	temp.y = nodeArray[index].y;
	int i=index;
	while(nodeArray[i+1].x != INF){
		nodeArray[i].x = nodeArray[i+1].x;
		nodeArray[i].y = nodeArray[i+1].y;
		i++;
	}
	nodeArray[i].x = INF;
	nodeArray[i].y = INF;
	return temp;
}

Node nodePop(Node& nodeArray[]){
	int i=0;
	while(nodeArray[i].x != INF){i++;}
	Node temp;
	temp.x = nodeArray[i-1].x;
	temp.y = nodeArray[i-1].y;
	nodeArray[i-1].x = INF;
	nodeArray[i-1].x = INF;
	return temp;
}

void nodePush( Node data, Node& nodeArray[] ){
	int i=0;
	while(i<(X_SIZE*Y_SIZE) && nodeArray[i].x != INF){i++;}
	nodeArray[i] = data;
}

int hScore(int xStart, int yStart, int xEnd, int yEnd){
	int temp1 = xEnd - xStart;
	if(temp1 < 0){
		temp1 = -temp1;
	}
	int temp2 = yEnd - yStart;
	if(temp2 < 0){
		temp2 = -temp2;
	}
	return temp1 + temp2;
}

void makePath(const Node& cameFrom[][], Node& current){
	Node temp;
	temp.x = current.x;
	temp.y = current.y;
	int i=0;
	for(i=0;i<MAX_SIZE;i++){
		globalPath[i].x = INF;
		globalPath[i].y = INF;
	}
	i = 0;
	globalPath[i] = temp;
	i++;
	while(cameFrom[temp.x][temp.y].x != INF){
		int xTemp = temp.x;
		int yTemp = temp.y;
		temp.x = cameFrom[xTemp][yTemp].x;
		temp.y = cameFrom[xTemp][yTemp].y;
		globalPath[i] = temp;
		i++;
	}
}





task main(){
	TextOut(0,0,"Hello World!");
	Wait(1000);
}
